name: 'Terraform'

on: workflow_dispatch
  # workflow_run:
  #   workflows: ["Docker Image CI"]
  #   types:
  #     - completed

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: uat
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: IAM Token
      id: issue-iam-token
      uses: yc-actions/yc-iam-token@v1.1.0
      with:
        yc-sa-json-credentials: ${{ secrets.iac_sacc_secret }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./terraform-ydb
      run: terraform init
      env:
        YC_TOKEN: ${{steps.issue-iam-token.outputs.token}}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ./terraform-ydb
      run: terraform fmt

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./terraform-ydb
      run: terraform plan -input=false
      env:
        YC_TOKEN: ${{steps.issue-iam-token.outputs.token}}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: ./terraform-ydb
      run: terraform apply -auto-approve -input=false
      env:
        YC_FOLDER_ID: ${{env.YC_FOLDER_ID}}
        YC_TOKEN: ${{steps.issue-iam-token.outputs.token}}
