name: 'Terraform'

on: workflow_dispatch
  # workflow_run:
  #   workflows: ["Docker Image CI"]
  #   types:
  #     - completed

permissions:
  contents: read

jobs:
  terraform_apply:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: uat
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: IAM Token
      id: issue-iam-token
      uses: yc-actions/yc-iam-token@v1
      with: 
        yc-key-id: ${{ secrets.YC_KEY_ID }}
        yc-service-account-id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
        yc-private-key: ${{ secrets.YC_PRIVATE_KEY }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    - name: Setup Terraform Backend
      id: backend
      run: |
        cat > backend.tf << EOF
        terraform {
          backend "remote" {
            organization = "${secrets.TF_CLOUD_ORGANIZATION}"

            workspaces {
              name = "${secrets.TF_CLOUD_WORKSPACE}"
            }
          }
        }
        EOF
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./terraform-ydb
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ./terraform-ydb
      run: terraform fmt

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./terraform-ydb
      env:
        YC_TOKEN: ${{ steps.issue-iam-token.outputs.token }}
        YC_FOLDER_ID: ${{ vars.YC_FOLDER_ID }}
      run: terraform plan -var="YC_TOKEN=$YC_TOKEN" -var="YC_FOLDER_ID=$YC_FOLDER_ID"

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   working-directory: ./terraform-ydb
    #   env:
    #     YC_TOKEN: ${{ steps.issue-iam-token.outputs.token }}
    #     YC_FOLDER_ID: ${{ vars.YC_FOLDER_ID }}
    #   run: terraform apply -auto-approve -var="YC_TOKEN=$YC_TOKEN" -var="YC_FOLDER_ID=$YC_FOLDER_ID"

    - name: Terraform destroy
      working-directory: ./terraform-ydb
      env:
        YC_TOKEN: ${{ steps.issue-iam-token.outputs.token }}
        YC_FOLDER_ID: ${{ vars.YC_FOLDER_ID }}
      run: terraform destroy -auto-approve  -var="YC_TOKEN=$YC_TOKEN" -var="YC_FOLDER_ID=$YC_FOLDER_ID"
  
  terraform_destroy:
    name: 'Terraform destroy'
    runs-on: ubuntu-latest
    environment: uat
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    needs: terraform_apply
    if: always()

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: IAM Token
        id: issue-iam-token
        uses: yc-actions/yc-iam-token@v1
        with: 
          yc-key-id: ${{ secrets.YC_KEY_ID }}
          yc-service-account-id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
          yc-private-key: ${{ secrets.YC_PRIVATE_KEY }}
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        
      - name: Terraform Init
        working-directory: ./terraform-ydb
        run: terraform init

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        working-directory: ./terraform-ydb
        env:
          YC_TOKEN: ${{ steps.issue-iam-token.outputs.token }}
          YC_FOLDER_ID: ${{ vars.YC_FOLDER_ID }}
        run: terraform plan -destroy -var="YC_TOKEN=$YC_TOKEN" -var="YC_FOLDER_ID=$YC_FOLDER_ID"

      - name: Terraform destroy
        working-directory: ./terraform-ydb
        env:
          YC_TOKEN: ${{ steps.issue-iam-token.outputs.token }}
          YC_FOLDER_ID: ${{ vars.YC_FOLDER_ID }}
        run: terraform destroy -auto-approve  -var="YC_TOKEN=$YC_TOKEN" -var="YC_FOLDER_ID=$YC_FOLDER_ID"