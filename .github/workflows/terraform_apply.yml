name: 'Terraform apply'

on:
  workflow_call:
    inputs: 
      version:
        description: 'Version'
        required: True
        type: string
      environment:
        description: Environment
        required: True  
        type: string
  workflow_dispatch:
    inputs: 
      version:
        description: 'Version'
        required: True
        type: string
      environment:
        description: 'Environment'
        required: True
        type: choice
        options:
        - uat
        - prod

permissions:
  contents: read

jobs:
  terraform_apply:
    name: 'Terraform apply'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: IAM Token
      id: issue-iam-token
      uses: yc-actions/yc-iam-token@v1
      with: 
        yc-key-id: ${{ secrets.YC_KEY_ID }}
        yc-service-account-id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
        yc-private-key: ${{ secrets.YC_PRIVATE_KEY }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./terraform-ydb
      env:
        ACCESS_KEY: ${{ secrets.TF_S3_ACCESS_KEY }}
        SECRET_KEY: ${{ secrets.TF_S3_SECRET_KEY }}
        S3_TERRAFORM: ${{secrets.S3_TERRAFORM}} 
      run: terraform init -backend-config="access_key=$ACCESS_KEY" -backend-config="secret_key=$SECRET_KEY" -var="S3_TERRAFORM=$S3_TERRAFORM" 

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ./terraform-ydb
      run: terraform fmt

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./terraform-ydb
      env:
        YC_TOKEN: ${{ steps.issue-iam-token.outputs.token }}
        YC_FOLDER_ID: ${{ vars.YC_FOLDER_ID }}
        YC_CONTAINER_REGISTRY: ${{ vars.YC_CONTAINER_REGISTRY }}
        YC_SERVICE_ACCOUNT_ID: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
        CLICKHOUSE_DB_FINNHUB_USER: ${{secrets.CLICKHOUSE_DB_FINNHUB_USER}}
        CLICKHOUSE_DB_FINNHUB_USER_SECRET: ${{secrets.CLICKHOUSE_DB_FINNHUB_USER_SECRET}}
        CLICKHOUSE_DB_NAME: ${{secrets.CLICKHOUSE_DB_NAME}}
        FINNHUB_API_KEY: ${{secrets.FINNHUB_API_KEY}}
        KAFKA_FINNHUB_TOPIC: ${{secrets.KAFKA_FINNHUB_TOPIC}}
        KAFKA_USER_CONSUMER: ${{secrets.KAFKA_USER_CONSUMER}}
        KAFKA_USER_PRODUCER: ${{secrets.KAFKA_USER_PRODUCER}}
        KAFKA_USER_SECRET_CONSUMER: ${{secrets.KAFKA_USER_SECRET_CONSUMER}}
        KAFKA_USER_SECRET_PRODUCER: ${{secrets.KAFKA_USER_SECRET_PRODUCER}}
        S3_TERRAFORM: ${{secrets.S3_TERRAFORM}} 
      run: terraform plan -var="YC_TOKEN=$YC_TOKEN" -var="YC_FOLDER_ID=$YC_FOLDER_ID" -var="YC_CONTAINER_REGISTRY=$YC_CONTAINER_REGISTRY" -var="YC_SERVICE_ACCOUNT_ID=$YC_SERVICE_ACCOUNT_ID" -var="CLICKHOUSE_DB_FINNHUB_USER=$CLICKHOUSE_DB_FINNHUB_USER" -var="CLICKHOUSE_DB_FINNHUB_USER_SECRET=$CLICKHOUSE_DB_FINNHUB_USER_SECRET" -var="CLICKHOUSE_DB_NAME=$CLICKHOUSE_DB_NAME" -var="FINNHUB_API_KEY=$FINNHUB_API_KEY" -var="KAFKA_FINNHUB_TOPIC=$KAFKA_FINNHUB_TOPIC" -var="KAFKA_USER_CONSUMER=$KAFKA_USER_CONSUMER" -var="KAFKA_USER_PRODUCER=$KAFKA_USER_PRODUCER" -var="KAFKA_USER_SECRET_CONSUMER=$KAFKA_USER_SECRET_CONSUMER" -var="KAFKA_USER_SECRET_PRODUCER=$KAFKA_USER_SECRET_PRODUCER" -var="S3_TERRAFORM=$S3_TERRAFORM" 
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: ./terraform-ydb
      env:
        YC_TOKEN: ${{ steps.issue-iam-token.outputs.token }}
        YC_FOLDER_ID: ${{ vars.YC_FOLDER_ID }}
        YC_CONTAINER_REGISTRY: ${{ vars.YC_CONTAINER_REGISTRY }}
        YC_SERVICE_ACCOUNT_ID: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
        CLICKHOUSE_DB_FINNHUB_USER: ${{secrets.CLICKHOUSE_DB_FINNHUB_USER}}
        CLICKHOUSE_DB_FINNHUB_USER_SECRET: ${{secrets.CLICKHOUSE_DB_FINNHUB_USER_SECRET}}
        CLICKHOUSE_DB_NAME: ${{secrets.CLICKHOUSE_DB_NAME}}
        FINNHUB_API_KEY: ${{secrets.FINNHUB_API_KEY}}
        KAFKA_FINNHUB_TOPIC: ${{secrets.KAFKA_FINNHUB_TOPIC}}
        KAFKA_USER_CONSUMER: ${{secrets.KAFKA_USER_CONSUMER}}
        KAFKA_USER_PRODUCER: ${{secrets.KAFKA_USER_PRODUCER}}
        KAFKA_USER_SECRET_CONSUMER: ${{secrets.KAFKA_USER_SECRET_CONSUMER}}
        KAFKA_USER_SECRET_PRODUCER: ${{secrets.KAFKA_USER_SECRET_PRODUCER}}
        S3_TERRAFORM: ${{secrets.S3_TERRAFORM}}
      run: terraform apply -auto-approve -var="YC_TOKEN=$YC_TOKEN" -var="YC_FOLDER_ID=$YC_FOLDER_ID" -var="YC_CONTAINER_REGISTRY=$YC_CONTAINER_REGISTRY" -var="YC_SERVICE_ACCOUNT_ID=$YC_SERVICE_ACCOUNT_ID" -var="CLICKHOUSE_DB_FINNHUB_USER=$CLICKHOUSE_DB_FINNHUB_USER" -var="CLICKHOUSE_DB_FINNHUB_USER_SECRET=$CLICKHOUSE_DB_FINNHUB_USER_SECRET" -var="CLICKHOUSE_DB_NAME=$CLICKHOUSE_DB_NAME" -var="FINNHUB_API_KEY=$FINNHUB_API_KEY" -var="KAFKA_FINNHUB_TOPIC=$KAFKA_FINNHUB_TOPIC" -var="KAFKA_USER_CONSUMER=$KAFKA_USER_CONSUMER" -var="KAFKA_USER_PRODUCER=$KAFKA_USER_PRODUCER" -var="KAFKA_USER_SECRET_CONSUMER=$KAFKA_USER_SECRET_CONSUMER" -var="KAFKA_USER_SECRET_PRODUCER=$KAFKA_USER_SECRET_PRODUCER" -var="S3_TERRAFORM=$S3_TERRAFORM" 
